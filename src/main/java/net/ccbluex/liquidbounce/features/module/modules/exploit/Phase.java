
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import net.ccbluex.liquidbounce.event.*;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;
import net.ccbluex.liquidbounce.utils.MovementUtils;
import net.ccbluex.liquidbounce.utils.block.BlockUtils;
import net.ccbluex.liquidbounce.utils.timer.TickTimer;
import net.ccbluex.liquidbounce.value.ListValue;
import net.minecraft.block.BlockAir;
import net.minecraft.client.network.NetHandlerPlayClient;
import net.minecraft.init.Blocks;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import net.minecraft.util.MathHelper;

@ModuleInfo(name = "Phase", description = "Allows you to walk through blocks.", category = ModuleCategory.EXPLOIT)
public class Phase extends Module {

    public final ListValue modeValue = new ListValue("Mode", new String[]{
            "Vanilla",
            "Skip",
            "Spartan",
            "Clip",
            "AAC3.5.0",
            "AACv4",
            "Jartex",
            "Redesky",
            "SmartVClip"
    }, "Jartex");

    private final TickTimer tickTimer = new TickTimer();
    private final TickTimer mineplexTickTimer = new TickTimer();
    private boolean mineplexClip, noRot;
    private int stage;

    @Override
    public void onEnable() {
        stage = 0;
        if (modeValue.get().equalsIgnoreCase("aacv4"))
            MinecraftInstance.mc.timer.timerSpeed = 0.1F;
    }

    @Override
    public void onDisable() {
        if (modeValue.get().equalsIgnoreCase("aacv4"))
            MinecraftInstance.mc.timer.timerSpeed = 1F;
    }

    @EventTarget
    public void onUpdate() {
        if (modeValue.get().equalsIgnoreCase("aacv4")) {
            switch (stage) {
                case 1: {
                    MinecraftInstance.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY - 0.00000001, MinecraftInstance.mc.thePlayer.posZ, MinecraftInstance.mc.thePlayer.rotationYaw, MinecraftInstance.mc.thePlayer.rotationPitch, false));
                    MinecraftInstance.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY - 1, MinecraftInstance.mc.thePlayer.posZ, MinecraftInstance.mc.thePlayer.rotationYaw, MinecraftInstance.mc.thePlayer.rotationPitch, false));
                    break;
                }
                case 3: {
                    this.setState(false);
                    break;
                }
            }
            stage++;
            return;
        } else if (modeValue.get().equalsIgnoreCase("redesky")) {
            switch (stage) {
                case 0: {
                    MinecraftInstance.mc.thePlayer.setPosition(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY - 0.00000001, MinecraftInstance.mc.thePlayer.posZ);
                    MinecraftInstance.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY - 0.00000001, MinecraftInstance.mc.thePlayer.posZ, MinecraftInstance.mc.thePlayer.rotationYaw, MinecraftInstance.mc.thePlayer.rotationPitch, false));
                    break;
                }
                case 1: {
                    MinecraftInstance.mc.thePlayer.setPosition(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY - 1, MinecraftInstance.mc.thePlayer.posZ);
                    MinecraftInstance.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY - 1, MinecraftInstance.mc.thePlayer.posZ, MinecraftInstance.mc.thePlayer.rotationYaw, MinecraftInstance.mc.thePlayer.rotationPitch, false));
                    break;
                }
                case 3: {
                    this.setState(false);
                }
            }
            stage++;
            return;
        }

        final boolean isInsideBlock = BlockUtils.collideBlockIntersects(MinecraftInstance.mc.thePlayer.getEntityBoundingBox(), block -> !(block instanceof BlockAir));

        if (isInsideBlock && !modeValue.get().equalsIgnoreCase("Jartex") && !modeValue.get().equalsIgnoreCase("SmartVClip")) {
            MinecraftInstance.mc.thePlayer.noClip = true;
            MinecraftInstance.mc.thePlayer.motionY = 0D;
            MinecraftInstance.mc.thePlayer.onGround = true;
        }

        final NetHandlerPlayClient netHandlerPlayClient = MinecraftInstance.mc.getNetHandler();

        switch (modeValue.get().toLowerCase()) {
            case "vanilla": {
                if (!MinecraftInstance.mc.thePlayer.onGround || !tickTimer.hasTimePassed(2) || !MinecraftInstance.mc.thePlayer.isCollidedHorizontally || !(!isInsideBlock || MinecraftInstance.mc.thePlayer.isSneaking()))
                    break;

                netHandlerPlayClient.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY, MinecraftInstance.mc.thePlayer.posZ, true));
                netHandlerPlayClient.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(0.5D, 0, 0.5D, true));
                netHandlerPlayClient.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY, MinecraftInstance.mc.thePlayer.posZ, true));
                netHandlerPlayClient.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY + 0.2D, MinecraftInstance.mc.thePlayer.posZ, true));
                netHandlerPlayClient.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(0.5D, 0, 0.5D, true));
                netHandlerPlayClient.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MinecraftInstance.mc.thePlayer.posX + 0.5D, MinecraftInstance.mc.thePlayer.posY, MinecraftInstance.mc.thePlayer.posZ + 0.5D, true));
                final double yaw = Math.toRadians(MinecraftInstance.mc.thePlayer.rotationYaw);
                final double x = -Math.sin(yaw) * 0.04D;
                final double z = Math.cos(yaw) * 0.04D;
                MinecraftInstance.mc.thePlayer.setPosition(MinecraftInstance.mc.thePlayer.posX + x, MinecraftInstance.mc.thePlayer.posY, MinecraftInstance.mc.thePlayer.posZ + z);
                tickTimer.reset();
                break;
            }
            case "skip": {
                if (!MinecraftInstance.mc.thePlayer.onGround || !tickTimer.hasTimePassed(2) || !MinecraftInstance.mc.thePlayer.isCollidedHorizontally || !(!isInsideBlock || MinecraftInstance.mc.thePlayer.isSneaking()))
                    break;

                final double direction = MovementUtils.getDirection();
                final double posX = -Math.sin(direction) * 0.3;
                final double posZ = Math.cos(direction) * 0.3;

                for (int i = 0; i < 3; ++i) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY + 0.06, MinecraftInstance.mc.thePlayer.posZ, true));
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MinecraftInstance.mc.thePlayer.posX + posX * i, MinecraftInstance.mc.thePlayer.posY, MinecraftInstance.mc.thePlayer.posZ + posZ * i, true));
                }

                MinecraftInstance.mc.thePlayer.setEntityBoundingBox(MinecraftInstance.mc.thePlayer.getEntityBoundingBox().offset(posX, 0.0D, posZ));
                MinecraftInstance.mc.thePlayer.setPositionAndUpdate(MinecraftInstance.mc.thePlayer.posX + posX, MinecraftInstance.mc.thePlayer.posY, MinecraftInstance.mc.thePlayer.posZ + posZ);
                tickTimer.reset();
                break;
            }
            case "spartan": {
                if (!MinecraftInstance.mc.thePlayer.onGround || !tickTimer.hasTimePassed(2) || !MinecraftInstance.mc.thePlayer.isCollidedHorizontally || !(!isInsideBlock || MinecraftInstance.mc.thePlayer.isSneaking()))
                    break;

                netHandlerPlayClient.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY, MinecraftInstance.mc.thePlayer.posZ, true));
                netHandlerPlayClient.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(0.5D, 0, 0.5D, true));
                netHandlerPlayClient.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY, MinecraftInstance.mc.thePlayer.posZ, true));
                netHandlerPlayClient.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY - 0.2D, MinecraftInstance.mc.thePlayer.posZ, true));
                netHandlerPlayClient.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(0.5D, 0, 0.5D, true));
                netHandlerPlayClient.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MinecraftInstance.mc.thePlayer.posX + 0.5D, MinecraftInstance.mc.thePlayer.posY, MinecraftInstance.mc.thePlayer.posZ + 0.5D, true));
                final double yaw = Math.toRadians(MinecraftInstance.mc.thePlayer.rotationYaw);
                final double x = -Math.sin(yaw) * 0.04D;
                final double z = Math.cos(yaw) * 0.04D;
                MinecraftInstance.mc.thePlayer.setPosition(MinecraftInstance.mc.thePlayer.posX + x, MinecraftInstance.mc.thePlayer.posY, MinecraftInstance.mc.thePlayer.posZ + z);
                tickTimer.reset();
                break;
            }
            case "clip": {
                if (!tickTimer.hasTimePassed(2) || !MinecraftInstance.mc.thePlayer.isCollidedHorizontally || !(!isInsideBlock || MinecraftInstance.mc.thePlayer.isSneaking()))
                    break;

                final double yaw = Math.toRadians(MinecraftInstance.mc.thePlayer.rotationYaw);
                final double oldX = MinecraftInstance.mc.thePlayer.posX;
                final double oldZ = MinecraftInstance.mc.thePlayer.posZ;

                for (int i = 1; i <= 10; i++) {
                    final double x = -Math.sin(yaw) * i;
                    final double z = Math.cos(yaw) * i;

                    if (BlockUtils.getBlock(new BlockPos(oldX + x, MinecraftInstance.mc.thePlayer.posY, oldZ + z)) instanceof BlockAir && BlockUtils.getBlock(new BlockPos(oldX + x, MinecraftInstance.mc.thePlayer.posY + 1, oldZ + z)) instanceof BlockAir) {
                        MinecraftInstance.mc.thePlayer.setPosition(oldX + x, MinecraftInstance.mc.thePlayer.posY, oldZ + z);
                        break;
                    }
                }
                tickTimer.reset();
                break;
            }
            case "aac3.5.0": {
                if (!tickTimer.hasTimePassed(2) || !MinecraftInstance.mc.thePlayer.isCollidedHorizontally || !(!isInsideBlock || MinecraftInstance.mc.thePlayer.isSneaking()))
                    break;

                final double yaw = Math.toRadians(MinecraftInstance.mc.thePlayer.rotationYaw);
                final double oldX = MinecraftInstance.mc.thePlayer.posX;
                final double oldZ = MinecraftInstance.mc.thePlayer.posZ;
                final double x = -Math.sin(yaw);
                final double z = Math.cos(yaw);

                MinecraftInstance.mc.thePlayer.setPosition(oldX + x, MinecraftInstance.mc.thePlayer.posY, oldZ + z);
                tickTimer.reset();
                break;
            }
            case "smartvclip": {
                boolean cageCollision = (MinecraftInstance.mc.theWorld.getBlockState(new BlockPos(MinecraftInstance.mc.thePlayer).up(3)).getBlock() != Blocks.air
                        && MinecraftInstance.mc.theWorld.getBlockState(new BlockPos(MinecraftInstance.mc.thePlayer).down()).getBlock() != Blocks.air);
                noRot = (MinecraftInstance.mc.thePlayer.ticksExisted >= 0 && MinecraftInstance.mc.thePlayer.ticksExisted <= 40 && cageCollision);
                if (MinecraftInstance.mc.thePlayer.ticksExisted >= 20 && MinecraftInstance.mc.thePlayer.ticksExisted < 40 && cageCollision) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY - 4, MinecraftInstance.mc.thePlayer.posZ, false));
                    MinecraftInstance.mc.thePlayer.setPosition(MinecraftInstance.mc.thePlayer.posX, MinecraftInstance.mc.thePlayer.posY - 4, MinecraftInstance.mc.thePlayer.posZ);
                }
                break;
            }
            case "redesky":
            case "redesky2": {
                this.setState(false);
                break;
            }
        }

        tickTimer.update();
    }

    @EventTarget
    public void onBlockBB(final BlockBBEvent event) {
        if (MinecraftInstance.mc.thePlayer != null && BlockUtils.collideBlockIntersects(MinecraftInstance.mc.thePlayer.getEntityBoundingBox(), block -> !(block instanceof BlockAir)) && event.getBoundingBox() != null && event.getBoundingBox().maxY > MinecraftInstance.mc.thePlayer.getEntityBoundingBox().minY && !modeValue.get().equalsIgnoreCase("Jartex") && !modeValue.get().equalsIgnoreCase("SmartVClip")) {
            final AxisAlignedBB axisAlignedBB = event.getBoundingBox();

            event.setBoundingBox(new AxisAlignedBB(axisAlignedBB.maxX, MinecraftInstance.mc.thePlayer.getEntityBoundingBox().minY, axisAlignedBB.maxZ, axisAlignedBB.minX, axisAlignedBB.minY, axisAlignedBB.minZ));
        }
    }

    @EventTarget
    public void onPacket(final PacketEvent event) {
        final Packet<?> packet = event.getPacket();

        if (packet instanceof C03PacketPlayer) {
            final C03PacketPlayer packetPlayer = (C03PacketPlayer) packet;

            if (modeValue.get().equalsIgnoreCase("AAC3.5.0")) {
                final float yaw = (float) MovementUtils.getDirection();

                packetPlayer.x = packetPlayer.x - MathHelper.sin(yaw) * 0.00000001D;
                packetPlayer.z = packetPlayer.z + MathHelper.cos(yaw) * 0.00000001D;
            }

            if (modeValue.get().equalsIgnoreCase("SmartVClip") && noRot && packetPlayer.rotating)
                event.cancelEvent();
        }

        if (packet instanceof C0BPacketEntityAction && modeValue.get().equalsIgnoreCase("SmartVClip") && noRot)
            event.cancelEvent();
    }

    @EventTarget
    private void onMove(final MoveEvent event) {
        if (modeValue.get().equalsIgnoreCase("jartex")) {
            if (MinecraftInstance.mc.thePlayer.isCollidedHorizontally)
                mineplexClip = true;
            if (!mineplexClip)
                return;

            mineplexTickTimer.update();

            event.setX(0);
            event.setZ(0);

            if (mineplexTickTimer.hasTimePassed(3)) {
                mineplexTickTimer.reset();
                mineplexClip = false;
            } else if (mineplexTickTimer.hasTimePassed(1)) {
                final double offset = mineplexTickTimer.hasTimePassed(2) ? 1.6D : 0.06D;
                final double direction = MovementUtils.getDirection();

                MinecraftInstance.mc.thePlayer.setPosition(MinecraftInstance.mc.thePlayer.posX + (-Math.sin(direction) * offset), MinecraftInstance.mc.thePlayer.posY, MinecraftInstance.mc.thePlayer.posZ + (Math.cos(direction) * offset));
            }
        }
        if (modeValue.get().equalsIgnoreCase("SmartVClip") && noRot)
            event.zeroXZ();
    }

    @EventTarget
    public void onPushOut(PushOutEvent event) {
        event.cancelEvent();
    }

    @EventTarget
    public void onJump(JumpEvent event) {
        if (modeValue.get().equalsIgnoreCase("SmartVClip") && noRot) event.cancelEvent();
    }

    @Override
    public String getTag() {
        return modeValue.get();
    }
}
